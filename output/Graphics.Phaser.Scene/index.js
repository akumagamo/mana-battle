// Generated by purs version 0.14.4
"use strict";
var $foreign = require("./foreign.js");
var Control_Applicative = require("../Control.Applicative/index.js");
var Data_Unit = require("../Data.Unit/index.js");
var Effect = require("../Effect/index.js");
var Effect_Uncurried = require("../Effect.Uncurried/index.js");
var Start = (function () {
    function Start(value0) {
        this.value0 = value0;
    };
    Start.create = function (value0) {
        return new Start(value0);
    };
    return Start;
})();
var PreUpdate = (function () {
    function PreUpdate(value0) {
        this.value0 = value0;
    };
    PreUpdate.create = function (value0) {
        return new PreUpdate(value0);
    };
    return PreUpdate;
})();
var Update = (function () {
    function Update(value0) {
        this.value0 = value0;
    };
    Update.create = function (value0) {
        return new Update(value0);
    };
    return Update;
})();
var PostUpdate = (function () {
    function PostUpdate(value0) {
        this.value0 = value0;
    };
    PostUpdate.create = function (value0) {
        return new PostUpdate(value0);
    };
    return PostUpdate;
})();
var Render = (function () {
    function Render(value0) {
        this.value0 = value0;
    };
    Render.create = function (value0) {
        return new Render(value0);
    };
    return Render;
})();
var Pause = (function () {
    function Pause(value0) {
        this.value0 = value0;
    };
    Pause.create = function (value0) {
        return new Pause(value0);
    };
    return Pause;
})();
var Resume = (function () {
    function Resume(value0) {
        this.value0 = value0;
    };
    Resume.create = function (value0) {
        return new Resume(value0);
    };
    return Resume;
})();
var Sleep = (function () {
    function Sleep(value0) {
        this.value0 = value0;
    };
    Sleep.create = function (value0) {
        return new Sleep(value0);
    };
    return Sleep;
})();
var Wake = (function () {
    function Wake(value0) {
        this.value0 = value0;
    };
    Wake.create = function (value0) {
        return new Wake(value0);
    };
    return Wake;
})();
var ShutDown = (function () {
    function ShutDown(value0) {
        this.value0 = value0;
    };
    ShutDown.create = function (value0) {
        return new ShutDown(value0);
    };
    return ShutDown;
})();
var Destroy = (function () {
    function Destroy(value0) {
        this.value0 = value0;
    };
    Destroy.create = function (value0) {
        return new Destroy(value0);
    };
    return Destroy;
})();
var Resize = (function () {
    function Resize(value0) {
        this.value0 = value0;
    };
    Resize.create = function (value0) {
        return new Resize(value0);
    };
    return Resize;
})();
var Boot = (function () {
    function Boot(value0) {
        this.value0 = value0;
    };
    Boot.create = function (value0) {
        return new Boot(value0);
    };
    return Boot;
})();
var wake = Effect_Uncurried.runEffectFn1($foreign.wakeImpl);
var $$switch = Effect_Uncurried.runEffectFn1($foreign.switchImpl);
var stop = Effect_Uncurried.runEffectFn1($foreign.stopImpl);
var startByKey = Effect_Uncurried.runEffectFn3($foreign.startByKeyImpl);
var start = Effect_Uncurried.runEffectFn2($foreign.startImpl);
var sleep = Effect_Uncurried.runEffectFn1($foreign.sleepImpl);
var setVisible = Effect_Uncurried.runEffectFn1($foreign.setVisibleImpl);
var setTimedEvent_ = Effect_Uncurried.runEffectFn3($foreign.setTimedEvent);
var setRegistryData = Effect_Uncurried.runEffectFn3($foreign.setRegistryDataImpl);
var setEvent_ = Effect_Uncurried.runEffectFn3($foreign.setEventImpl);
var setEvent = function (event) {
    if (event instanceof Start) {
        return setEvent_("start")(event.value0);
    };
    if (event instanceof PreUpdate) {
        return setTimedEvent_("preupdate")(event.value0);
    };
    if (event instanceof Update) {
        return setTimedEvent_("update")(event.value0);
    };
    if (event instanceof PostUpdate) {
        return setTimedEvent_("postupdate")(event.value0);
    };
    if (event instanceof Render) {
        return setEvent_("render")(event.value0);
    };
    if (event instanceof Pause) {
        return setEvent_("pause")(event.value0);
    };
    if (event instanceof Resume) {
        return setEvent_("resume")(event.value0);
    };
    if (event instanceof Sleep) {
        return setEvent_("sleep")(event.value0);
    };
    if (event instanceof Wake) {
        return setEvent_("wake")(event.value0);
    };
    if (event instanceof ShutDown) {
        return setEvent_("shutdown")(event.value0);
    };
    if (event instanceof Destroy) {
        return setEvent_("destroy")(event.value0);
    };
    if (event instanceof Resize) {
        return setEvent_("resize")(event.value0);
    };
    if (event instanceof Boot) {
        return setEvent_("boot")(event.value0);
    };
    throw new Error("Failed pattern match at Graphics.Phaser.Scene (line 239, column 18 - line 252, column 33): " + [ event.constructor.name ]);
};
var setData = function (key) {
    return function (data_) {
        return function (scene) {
            return function () {
                return $foreign.setDataImpl(key, data_, scene);
            };
        };
    };
};
var sendToBack = Effect_Uncurried.runEffectFn1($foreign.sendToBackImpl);
var sceneSceneManagerConnection = {
    getSceneManager: $foreign.getSceneManagerImpl
};
var sceneRegistryConnection = {
    getRegistry: Effect_Uncurried.runEffectFn1($foreign.getRegistryImpl)
};
var run = Effect_Uncurried.runEffectFn1($foreign.runImpl);
var resume = Effect_Uncurried.runEffectFn1($foreign.resumeImpl);
var restart = function (scene) {
    return function (a) {
        return function () {
            return $foreign.restartImpl(scene, a);
        };
    };
};
var removeByKey = Effect_Uncurried.runEffectFn2($foreign.removeByKeyImpl);
var remove = Effect_Uncurried.runEffectFn1($foreign.removeImpl);
var pause = Effect_Uncurried.runEffectFn1($foreign.pauseImpl);
var launchByKey = Effect_Uncurried.runEffectFn3($foreign.launchByKeyImpl);
var launch = Effect_Uncurried.runEffectFn2($foreign.launchImpl);
var getSceneManager = function (dict) {
    return dict.getSceneManager;
};
var getRegistryData = Effect_Uncurried.runEffectFn2($foreign.getRegistryDataImpl);
var getRegistry = function (dict) {
    return dict.getRegistry;
};
var getPluginInstance = Effect_Uncurried.runEffectFn2($foreign.getPluginInstanceImpl);
var getData = function (key) {
    return function (scene) {
        return function () {
            return $foreign.getDataImpl(key, scene);
        };
    };
};
var getByKey = Effect_Uncurried.runEffectFn2($foreign.getByKeyImpl);
var gameSceneManagerConnection = {
    getSceneManager: $foreign.getSceneManagerImpl
};
var gameRegistryConnection = {
    getRegistry: Effect_Uncurried.runEffectFn1($foreign.getRegistryImpl)
};
var defaultSceneConfig = {
    key: "",
    autoStart: false,
    create: function (_scene) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    },
    init: function (_scene) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    },
    update: function (_scene) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    },
    preload: function (_scene) {
        return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
    }
};
var bringToTop = Effect_Uncurried.runEffectFn1($foreign.bringToTopImpl);
var addScene = Effect_Uncurried.runEffectFn3($foreign.addSceneImpl);
module.exports = {
    defaultSceneConfig: defaultSceneConfig,
    getSceneManager: getSceneManager,
    getRegistry: getRegistry,
    addScene: addScene,
    getRegistryData: getRegistryData,
    setRegistryData: setRegistryData,
    getData: getData,
    setData: setData,
    getByKey: getByKey,
    remove: remove,
    start: start,
    restart: restart,
    pause: pause,
    resume: resume,
    sleep: sleep,
    wake: wake,
    "switch": $$switch,
    run: run,
    stop: stop,
    setVisible: setVisible,
    sendToBack: sendToBack,
    bringToTop: bringToTop,
    setEvent: setEvent,
    launch: launch,
    launchByKey: launchByKey,
    startByKey: startByKey,
    removeByKey: removeByKey,
    getPluginInstance: getPluginInstance,
    sceneSceneManagerConnection: sceneSceneManagerConnection,
    gameSceneManagerConnection: gameSceneManagerConnection,
    sceneRegistryConnection: sceneRegistryConnection,
    gameRegistryConnection: gameRegistryConnection,
    setTimedEvent: $foreign.setTimedEvent,
    setGameObjectEvent: $foreign.setGameObjectEvent
};
