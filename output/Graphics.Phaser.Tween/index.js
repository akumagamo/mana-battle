// Generated by purs version 0.14.4
"use strict";
var $foreign = require("./foreign.js");
var TweenVector = (function () {
    function TweenVector(value0) {
        this.value0 = value0;
    };
    TweenVector.create = function (value0) {
        return new TweenVector(value0);
    };
    return TweenVector;
})();
var TweenScale = (function () {
    function TweenScale(value0) {
        this.value0 = value0;
    };
    TweenScale.create = function (value0) {
        return new TweenScale(value0);
    };
    return TweenScale;
})();
var TweenRotation = (function () {
    function TweenRotation(value0) {
        this.value0 = value0;
    };
    TweenRotation.create = function (value0) {
        return new TweenRotation(value0);
    };
    return TweenRotation;
})();
var TweenAngle = (function () {
    function TweenAngle(value0) {
        this.value0 = value0;
    };
    TweenAngle.create = function (value0) {
        return new TweenAngle(value0);
    };
    return TweenAngle;
})();
var TweenAlpha = (function () {
    function TweenAlpha(value0) {
        this.value0 = value0;
    };
    TweenAlpha.create = function (value0) {
        return new TweenAlpha(value0);
    };
    return TweenAlpha;
})();
var addTween = function (dictGameObject) {
    return function (config) {
        if (config.prop instanceof TweenVector) {
            return $foreign.addTweenImpl({
                scene: config.scene,
                targets: config.targets,
                prop: config.prop.value0,
                delay: config.delay,
                duration: config.duration,
                ease: config.ease,
                repeat: config.repeat,
                yoyo: config.yoyo,
                callback: config.callback
            });
        };
        if (config.prop instanceof TweenScale) {
            return $foreign.addTweenImpl({
                scene: config.scene,
                targets: config.targets,
                prop: config.prop.value0,
                delay: config.delay,
                duration: config.duration,
                ease: config.ease,
                repeat: config.repeat,
                yoyo: config.yoyo,
                callback: config.callback
            });
        };
        if (config.prop instanceof TweenRotation) {
            return $foreign.addTweenImpl({
                scene: config.scene,
                targets: config.targets,
                prop: config.prop.value0,
                delay: config.delay,
                duration: config.duration,
                ease: config.ease,
                repeat: config.repeat,
                yoyo: config.yoyo,
                callback: config.callback
            });
        };
        if (config.prop instanceof TweenAngle) {
            return $foreign.addTweenImpl({
                scene: config.scene,
                targets: config.targets,
                prop: config.prop.value0,
                delay: config.delay,
                duration: config.duration,
                ease: config.ease,
                repeat: config.repeat,
                yoyo: config.yoyo,
                callback: config.callback
            });
        };
        if (config.prop instanceof TweenAlpha) {
            return $foreign.addTweenImpl({
                scene: config.scene,
                targets: config.targets,
                prop: config.prop.value0,
                delay: config.delay,
                duration: config.duration,
                ease: config.ease,
                repeat: config.repeat,
                yoyo: config.yoyo,
                callback: config.callback
            });
        };
        throw new Error("Failed pattern match at Graphics.Phaser.Tween (line 29, column 19 - line 34, column 53): " + [ config.prop.constructor.name ]);
    };
};
module.exports = {
    addTween: addTween,
    TweenVector: TweenVector,
    TweenScale: TweenScale,
    TweenRotation: TweenRotation,
    TweenAngle: TweenAngle,
    TweenAlpha: TweenAlpha
};
